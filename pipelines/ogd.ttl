@base <http://opendatabs.github.com/ld-pipeline/ogd/>.
@prefix p: <https://pipeline.described.at/>.
@prefix code: <https://code.described.at/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.

<defaultVars>
  p:variable [ a p:Variable;
    p:name "ENDPOINT_URL";
    p:value "http://localhost:3030/data"
  ], [ a p:Variable;
    p:name "ENDPOINT_USER";
    p:value "admin"
  ], [ a p:Variable;
    p:name "ENDPOINT_PASSWORD";
    p:value "test"
  ], [ a p:Variable;
    p:name "observer";
    p:value "https://opendata.bs.ch/"
  ].

<defaultVarsDaily>
  p:variable [ a p:Variable;
    p:name "csvMappingFilePattern";
    p:value "input/ogd/daily/*.csv-metadata.json"
  ], [ a p:Variable;
    p:name "graph";
    p:value "https://ld.bs.ch/graph/ogd-daily"
  ].

<defaultVarsMonthly>
  p:variable [ a p:Variable;
    p:name "csvMappingFilePattern";
    p:value "input/ogd/monthly/*.csv-metadata.json"
  ], [ a p:Variable;
    p:name "graph";
    p:value "https://ld.bs.ch/graph/ogd-monthly"
  ].

<defaultVarsWeekly>
  p:variable [ a p:Variable;
    p:name "csvMappingFilePattern";
    p:value "input/ogd/weekly/*.csv-metadata.json"
  ], [ a p:Variable;
    p:name "graph";
    p:value "https://ld.bs.ch/graph/ogd-weekly"
  ].

<stdoutDaily> a p:Pipeline, p:Readable;
  p:variables <defaultVars>, <defaultVarsDaily>;
  p:steps [
    p:stepList (
      <listCsvwMetaFiles>
      <forEachCsvwMetaFile>
      <serialize>
    )
  ].

<storeDaily> a p:Pipeline;
  p:variables <defaultVars>, <defaultVarsDaily>;
  p:steps [
    p:stepList (
      <listCsvwMetaFiles>
      <forEachCsvwMetaFile>
      <setGraph>
      <upload>
    )
  ].

<stdoutMonthly> a p:Pipeline, p:Readable;
  p:variables <defaultVars>, <defaultVarsMonthly>;
  p:steps [
    p:stepList (
      <listCsvwMetaFiles>
      <forEachCsvwMetaFile>
      <serialize>
    )
  ].

<storeMonthly> a p:Pipeline;
  p:variables <defaultVars>, <defaultVarsMonthly>;
  p:steps [
    p:stepList (
      <listCsvwMetaFiles>
      <forEachCsvwMetaFile>
      <setGraph>
      <upload>
    )
  ].

<stdoutWeekly> a p:Pipeline, p:Readable;
  p:variables <defaultVars>, <defaultVarsWeekly>;
  p:steps [
    p:stepList (
      <listCsvwMetaFiles>
      <forEachCsvwMetaFile>
      <serialize>
    )
  ].

<storeWeekly> a p:Pipeline;
  p:variables <defaultVars>, <defaultVarsWeekly>;
  p:steps [
    p:stepList (
      <listCsvwMetaFiles>
      <forEachCsvwMetaFile>
      <setGraph>
      <upload>
    )
  ].

<listCsvwMetaFiles> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base#glob>
  ];
  code:arguments[
    code:name "pattern";
    code:value "csvMappingFilePattern"^^p:VariableName
  ].

<forEachCsvwMetaFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/forEach.js#default>
  ];
  code:arguments (<readCsvTriples> "csvMapping").

<readCsvTriples> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readCsv>
      <parseCsv>
      <removeCsvwTriples>
      <map>
      <mapGeometry>
      <flatten1>
      <toDataset>
      <toObservation>
      <buildCubeShape>
      <flatten2>
    )
  ].

<readCsv> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-csvw#fetch>
  ];
  code:arguments [
    code:name "csvw";
    code:value "file:${csvMapping}"^^code:EcmaScriptTemplateLiteral
  ].

<parseCsv> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/csvw.js#parse>
  ];
  code:arguments [
    code:name "metadata";
    code:value <parseMetadata>
  ], [
    code:name "relaxColumnCount";
    code:value true
  ].

<removeCsvwTriples> a p:Step ;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/filter.js#default>
  ];
  code:arguments ([ a code:EcmaScriptModule;
    code:link <file:../lib/isNotCsvwTriple.js#default>
  ]).

<map> a p:Step ;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/map.js#default>
  ];
  code:arguments ([ a code:EcmaScriptModule;
    code:link <file:../lib/map.js#default>
  ]).

<mapGeometry> a p:Step ;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/map.js#default>
  ];
  code:arguments ([ a code:EcmaScriptModule;
    code:link <file:../lib/mapGeometry.js#default>
  ]).

<flatten1> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/flatten.js#default>;
  ].

<toDataset> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:rdf-stream-to-dataset-stream/bySubject.js#default>
  ].

<toObservation> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-rdf/cube.js#toObservation>
  ];
  code:arguments [
    code:name "observer";
    code:value "observer"^^p:VariableName
  ].

<buildCubeShape> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-rdf/cube.js#buildCubeShape>
  ].

<flatten2> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/flatten.js#default>;
  ].

<serialize> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/ntriples.js#serialize>
  ].

<parseMetadata> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readMetadataJson>
      <parseMetadataJson>
    )
  ].

<readMetadataJson> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("csvMapping"^^p:VariableName).

<parseMetadataJson> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/jsonld.js#parse>
  ].

<setGraph> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-rdf/setGraph.js#default>
  ];
  code:arguments ("graph"^^p:VariableName).

<upload> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-graph-store#put>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "ENDPOINT_URL"^^p:VariableName
  ], [
    code:name "user";
    code:value "ENDPOINT_USER"^^p:VariableName
  ], [
    code:name "password";
    code:value "ENDPOINT_PASSWORD"^^p:VariableName
  ].
